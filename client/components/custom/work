'use client'
import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Editor from '@monaco-editor/react';
import { io, Socket } from 'socket.io-client';
import CodeExecutor from '../utils/codeExecutor';
import {
  Clock, Code, CheckCircle, X, Eye, EyeOff, Crown, AlertTriangle,
  MessageCircle, Send, Zap, Activity, Flame, Shield, ChevronUp,
  Trophy, Cpu, Rocket, Target
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useAuth } from '../utils/AuthContext';
import MatchmakingScreen from '@/components/custom/matchmaking/MatchMakingComp';
import { AnimatePresence, motion } from 'framer-motion';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

const CodeBattleArena = () => {
  // Sample problem statements - in a real app, these would come from an API
  const problemStatements = [
    {
      id: 'max-subarray',
      title: 'Maximum Subarray',
      difficulty: 'Medium',
      description: `
        Given an array of integers, find the contiguous subarray with the largest sum and return both the sum and the subarray.

        Input:
        [-2, 1, -3, 4, -1, 2, 1, -5, 4]

        Expected Output:
        Sum: 6
        Subarray: [4, -1, 2, 1]

        Constraints:
        The array length will be between 1 and 10,000
        Time complexity must be O(n)
        Space complexity must be O(1) excluding the output

        Bonus points for clean code and efficient edge case handling.
      `
    },
    {
      id: 'two-sum',
      title: 'Two Sum',
      difficulty: 'Easy',
      description: `
        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
        You may assume that each input would have exactly one solution, and you may not use the same element twice.

        Input:
        nums = [2, 7, 11, 15], target = 9

        Expected Output:
        [0, 1]

        Constraints:
        2 <= nums.length <= 10^4
        -10^9 <= nums[i] <= 10^9
        -10^9 <= target <= 10^9
        Only one valid answer exists.
      `
    }
  ];

  // Languages configuration
  const languages = [
    { id: 63, name: 'JavaScript', extension: 'js' },
    { id: 71, name: 'Python', extension: 'py' },
    { id: 54, name: 'C++', extension: 'cpp' },
    { id: 62, name: 'Java', extension: 'java' },
    { id: 78, name: 'Rust', extension: 'rs' },
  ];

  // State variables
  const { user, loading } = useAuth();

  const [yourStatus, setYourStatus] = useState('coding');
  const [roomId, setRoomId] = useState('');
  const [opponentStatus, setOpponentStatus] = useState('coding');
  const [showProblem, setShowProblem] = useState(true);
  const [matchFound, setMatchFound] = useState(false);
  const [chatOpen, setChatOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [currentProblem, setCurrentProblem] = useState(problemStatements[0]);
  const [selectedLanguage, setSelectedLanguage] = useState(languages[0]);
  const [yourCode, setYourCode] = useState('');
  const [opponentCode, setOpponentCode] = useState('');
  const [timer, setTimer] = useState(300); // 5 minutes in seconds
  const [yourProgress, setYourProgress] = useState(0);
  const [opponentProgress, setOpponentProgress] = useState(0);
  const [showBattleNotification, setShowBattleNotification] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');
  const [battleEvents, setBattleEvents] = useState([]);
  const [showCountdown, setShowCountdown] = useState(false);
  const [countdownValue, setCountdownValue] = useState(3);
  const [isGameOver, setIsGameOver] = useState(false);
  const [winner, setWinner] = useState(null);
  const [testsPassed, setTestsPassed] = useState(0);
  const [totalTests, setTotalTests] = useState(5);
  const [opponentTestsPassed, setOpponentTestsPassed] = useState(0);

  const joinedRoom = useRef(false);
  const socketRef = useRef<Socket | null>(null);
  const messagesEndRef = useRef(null);
  const timerRef = useRef(null);

  // Generate initial code based on problem and language
  const generateInitialCode = (problem, language) => {
    const functionName = generateFunctionName(problem.description);

    switch (language.name) {
      case 'JavaScript':
        return `function ${functionName}(arr) {
  // Implement your solution here
  return null;
}

console.log(${functionName}([-2, 1, -3, 4, -1, 2, 1, -5, 4]));`;

      case 'Python':
        return `def ${functionName.toLowerCase()}(arr):
    # Implement your solution here
    return None

print(${functionName.toLowerCase()}([-2, 1, -3, 4, -1, 2, 1, -5, 4]))`;

      case 'C++':
        return `#include <iostream>
#include <vector>

using namespace std;

vector<int> ${functionName}(vector<int>& nums) {
    // Implement your solution here
    return {};
}

int main() {
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    auto result = ${functionName}(nums);
    
    // Print result
    return 0;
}`;

      case 'Java':
        return `import java.util.*;

public class Solution {
    public static int[] ${functionName}(int[] nums) {
        // Implement your solution here
        return null;
    }
    
    public static void main(String[] args) {
        int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int[] result = ${functionName}(nums);
        // Print result
    }
}`;

      case 'Rust':
        return `fn ${functionName.toLowerCase()}(nums: &[i32]) -> Vec<i32> {
    // Implement your solution here
    vec![]
}

fn main() {
    let nums = vec![-2, 1, -3, 4, -1, 2, 1, -5, 4];
    let result = ${functionName.toLowerCase()}(&nums);
    println!("{:?}", result);
}`;

      default:
        return `// Implement your solution here`;
    }
  };

  // Utility to generate function name from problem statement
  const generateFunctionName = (problem) => {
    const keywords = problem
      .match(/\b(array|sum|subarray|maximum|find|largest|optimization|contiguous|two|target)\b/gi) || [];

    const functionName = keywords
      .map((word, index) =>
        index === 0
          ? word.toLowerCase()
          : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
      )
      .join('');

    return functionName || 'customSolution';
  };

  // Initialize code when problem or language changes
  useEffect(() => {
    const newCode = generateInitialCode(currentProblem, selectedLanguage);
    setYourCode(newCode);
  }, [currentProblem, selectedLanguage]);

  // Socket connection and event handling
  useEffect(() => {
    async function handlePlayer() {
      if (user !== null) {
        if (!socketRef.current) {
          socketRef.current = io("http://localhost:4000", {
            withCredentials: true
          });

          const handleOpponentCode = ({ code, from }) => {
            if (socketRef.current && from === socketRef.current.id) {
              setYourCode(code); // It's your code
            } else {
              setOpponentCode(code); // It's opponent's code

              // Simulate opponent progress
              const codeLength = code.split('\n').filter(line => line.trim() !== '').length;
              const expectedLength = 20; // Adjust based on your expected solution length
              const progress = Math.min(Math.floor((codeLength / expectedLength) * 100), 95);
              setOpponentProgress(progress);

              // Add battle event when opponent makes significant progress
              if (progress > 50 && progress % 25 === 0) {
                addBattleEvent(`Opponent is making rapid progress! ${progress}% complete`);
              }
            }
          };

          const handleConnect = () => {
            socketRef.current?.emit('findMatch', { userId: user.id, eloRating: 100 });

            socketRef.current?.on("matchFound", () => {
              setMatchFound(true);
              // Start countdown animation
              startCountdown();

              socketRef.current?.emit('joinRoom', user.username);

              socketRef.current?.on('roomAssigned', ({ roomId }) => {
                console.log('Assigned to room:', roomId);
                setRoomId(roomId);
              });

              socketRef.current?.on('opponentCode', handleOpponentCode);

              // Simulate opponent progress updates
              const randomProgressUpdates = setInterval(() => {
                setOpponentTestsPassed(prev => {
                  if (prev < totalTests) {
                    // Random chance to increment tests passed
                    if (Math.random() > 0.7) {
                      const newVal = prev + 1;
                      if (newVal === totalTests) {
                        addBattleEvent("Opponent has passed all tests! Hurry!");
                      } else {
                        addBattleEvent(`Opponent passed test ${newVal}/${totalTests}`);
                      }
                      return newVal;
                    }
                  }
                  return prev;
                });
              }, 15000);

              return () => clearInterval(randomProgressUpdates);
            });
          }

          socketRef.current.connect();

          socketRef.current.on("connect", handleConnect)

          socketRef.current.on("gameOver", (data) => {
            setIsGameOver(true);
            setWinner(data.winner === socketRef.current?.id ? 'you' : 'opponent');
            clearInterval(timerRef.current);
          });

          socketRef.current.on("disconnect", () => {
            console.log("User Disconnected");
          });

          return () => {
            if (socketRef.current) {
              socketRef.current.off("connect");
              socketRef.current.off("disconnect");
              socketRef.current.disconnect();
              socketRef.current = null;
            }
          };
        }
      }
    }
    handlePlayer();
  }, [user]);

  // Start countdown before match begins
  const startCountdown = () => {
    setShowCountdown(true);
    let count = 3;
    setCountdownValue(count);

    const countdownInterval = setInterval(() => {
      count--;
      setCountdownValue(count);

      if (count === 0) {
        clearInterval(countdownInterval);
        setTimeout(() => {
          setShowCountdown(false);
          startTimer();
          showNotification("BATTLE BEGINS!", "red");
        }, 1000);
      }
    }, 1000);
  };

  // Timer setup
  const startTimer = () => {
    timerRef.current = setInterval(() => {
      setTimer(prevTime => {
        if (prevTime <= 0) {
          clearInterval(timerRef.current);
          handleTimeUp();
          return 0;
        }

        // Critical time alerts
        if (prevTime === 60) {
          showNotification("60 SECONDS LEFT!", "red");
        } else if (prevTime === 30) {
          showNotification("30 SECONDS LEFT!", "red");
        } else if (prevTime === 10) {
          showNotification("FINAL COUNTDOWN: 10!", "red");
        }

        return prevTime - 1;
      });
    }, 1000);
  };

  const handleTimeUp = () => {
    setIsGameOver(true);
    // Compare progress to determine winner
    if (testsPassed > opponentTestsPassed) {
      setWinner('you');
    } else if (testsPassed < opponentTestsPassed) {
      setWinner('opponent');
    } else {
      // Tie - check code quality or other metrics
      setWinner(Math.random() > 0.5 ? 'you' : 'opponent');
    }
  };

  // Show battle notifications
  const showNotification = (message, type = "blue") => {
    setNotificationMessage(message);
    setShowBattleNotification(true);
    setTimeout(() => setShowBattleNotification(false), 3000);
  };

  // Add a battle event to the timeline
  const addBattleEvent = (message) => {
    setBattleEvents(prev => [{ message, time: formatTime(timer) }, ...prev].slice(0, 5));
  };

  // Send code updates to opponent
  const handleCodeChange = (newCode: string) => {
    setYourCode(newCode || "");
    socketRef.current?.emit('codeUpdate', { roomId: roomId, code: newCode });

    // Simulate progress calculations based on code changes
    const lines = newCode.split('\n').filter(line => line.trim() !== '').length;
    const expectedLines = 20; // Adjust based on your expected solution size
    const newProgress = Math.min(Math.floor((lines / expectedLines) * 100), 95);
    setYourProgress(newProgress);
  };

  // Run tests
  const runTests = () => {
    // Simulate test running
    showNotification("RUNNING TESTS...");

    setTimeout(() => {
      const newTestsPassed = Math.min(testsPassed + 1, totalTests);
      setTestsPassed(newTestsPassed);

      if (newTestsPassed === totalTests) {
        setYourStatus('passed');
        showNotification("ALL TESTS PASSED! 🔥", "green");
        addBattleEvent("You've passed all tests!");
      } else {
        showNotification(`TEST ${newTestsPassed}/${totalTests} PASSED!`, "green");
        addBattleEvent(`You passed test ${newTestsPassed}/${totalTests}`);
      }
    }, 1500);
  };

  // Submit final solution
  const submitSolution = () => {
    showNotification("SOLUTION SUBMITTED!", "purple");
    setYourStatus('submitted');
    addBattleEvent("You've submitted your solution!");

    // Simulate validation
    setTimeout(() => {
      if (testsPassed === totalTests) {
        setYourStatus('passed');
        showNotification("VICTORY! ALL TESTS PASSED!", "green");
        setIsGameOver(true);
        setWinner('you');
        clearInterval(timerRef.current);
      } else {
        setYourStatus('failed');
        showNotification("SOME TESTS FAILED", "yellow");
      }
    }, 2000);
  };

  // Handle problem selection change
  const handleProblemChange = (problemId) => {
    const problem = problemStatements.find(p => p.id === problemId);
    if (problem) {
      setCurrentProblem(problem);
    }
  };

  // Handle language selection change
  const handleLanguageChange = (languageId) => {
    const language = languages.find(l => l.id.toString() === languageId);
    if (language) {
      setSelectedLanguage(language);
    }
  };

  // Format time from seconds to MM:SS
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // Get status styling
  const getStatusColor = (status) => {
    switch (status) {
      case 'submitted': return 'text-yellow-400';
      case 'passed': return 'text-green-400';
      case 'failed': return 'text-red-400';
      default: return 'text-blue-400';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'submitted': return <AlertTriangle className="w-4 h-4 text-yellow-400" />;
      case 'passed': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'failed': return <X className="w-4 h-4 text-red-400" />;
      default: return <Code className="w-4 h-4 text-blue-400" />;
    }
  };

  // Victory Screen Component
  const VictoryScreen = ({ winner, yourScore, opponentScore }) => (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="absolute inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50"
    >
      <motion.div
        initial={{ scale: 0.8 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", damping: 12 }}
        className="bg-slate-900 border-2 border-indigo-500 rounded-xl p-8 max-w-lg w-full mx-4 text-center"
      >
        <motion.div
          initial={{ y: -20 }}
          animate={{ y: 0 }}
          transition={{ delay: 0.2 }}
        >
          {winner === 'you' ? (
            <>
              <Trophy className="w-20 h-20 text-yellow-400 mx-auto mb-4" />
              <h2 className="text-4xl font-bold text-yellow-400 mb-4">VICTORY!</h2>
            </>
          ) : (
            <>
              <Shield className="w-20 h-20 text-blue-400 mx-auto mb-4" />
              <h2 className="text-4xl font-bold text-blue-400 mb-4">DEFEATED</h2>
            </>
          )}
        </motion.div>

        <div className="mb-6 mt-4">
          <div className="flex justify-between items-center mb-2 text-xl">
            <span>Your Score:</span>
            <span className="font-bold text-green-400">{yourScore}</span>
          </div>
          <div className="flex justify-between items-center text-xl">
            <span>Opponent's Score:</span>
            <span className="font-bold text-red-400">{opponentScore}</span>
          </div>
        </div>

        <div className="bg-slate-800 p-4 rounded-lg mb-6">
          <h3 className="text-lg font-semibold mb-2">Battle Stats</h3>
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-slate-700 p-2 rounded">
              <div className="text-sm opacity-80">Tests Passed</div>
              <div className="text-xl font-bold">{testsPassed}/{totalTests}</div>
            </div>
            <div className="bg-slate-700 p-2 rounded">
              <div className="text-sm opacity-80">Time Used</div>
              <div className="text-xl font-bold">{formatTime(300 - timer)}</div>
            </div>
            <div className="bg-slate-700 p-2 rounded">
              <div className="text-sm opacity-80">Code Quality</div>
              <div className="text-xl font-bold">A-</div>
            </div>
            <div className="bg-slate-700 p-2 rounded">
              <div className="text-sm opacity-80">Efficiency</div>
              <div className="text-xl font-bold">95%</div>
            </div>
          </div>
        </div>

        <div className="flex space-x-4">
          <Button
            className="flex-1 bg-slate-700 hover:bg-slate-600 text-white"
            onClick={() => window.location.reload()}
          >
            View Solution
          </Button>
          <Button
            className="flex-1 bg-indigo-600 hover:bg-indigo-500 text-white"
            onClick={() => window.location.reload()}
          >
            Battle Again
          </Button>
        </div>
      </motion.div>
    </motion.div>
  );

  // Battle Header Component
  const BattleHeader = () => (
    <div className="bg-slate-900 border-b border-slate-700 p-2">
      <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
        <div className="flex items-center mb-2 sm:mb-0">
          {/* Problem selection */}
          <div className="mr-2">
            <Select value={currentProblem.id} onValueChange={handleProblemChange}>
              <SelectTrigger className="w-[180px] bg-slate-800 border-slate-700 text-white">
                <SelectValue>
                  <div className="flex items-center">
                    <Target className="w-4 h-4 mr-2" />
                    {currentProblem.title}
                  </div>
                </SelectValue>
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-slate-700 text-white">
                {problemStatements.map(problem => (
                  <SelectItem key={problem.id} value={problem.id}>
                    <div className="flex items-center">
                      <Target className="w-4 h-4 mr-2" />
                      {problem.title}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Language selection */}
          <div>
            <Select value={selectedLanguage.id.toString()} onValueChange={handleLanguageChange}>
              <SelectTrigger className="w-[150px] bg-slate-800 border-slate-700 text-white">
                <SelectValue>
                  <div className="flex items-center">
                    <Code className="w-4 h-4 mr-2" />
                    {selectedLanguage.name}
                  </div>
                </SelectValue>
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-slate-700 text-white">
                {languages.map(language => (
                  <SelectItem key={language.id} value={language.id.toString()}>
                    <div className="flex items-center">
                      <Code className="w-4 h-4 mr-2" />
                      {language.name}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Battle timer */}
        <div className="flex items-center justify-center space-x-2">
          <Badge
            variant="outline"
            className={`
              ${timer <= 60 ? 'bg-red-900/60 text-red-400 border-red-700 animate-pulse' : 'bg-slate-800 text-white border-slate-700'} 
              px-3 py-1 text-lg font-mono flex items-center
            `}
          >
            <Clock className="w-4 h-4 mr-2" />
            {formatTime(timer)}
          </Badge>

          <div className="flex space-x-1">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-8 w-8 bg-slate-800 border-slate-700 hover:bg-slate-700"
                    onClick={() => setShowProblem(!showProblem)}
                  >
                    {showProblem ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  {showProblem ? "Hide problem" : "Show problem"}
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-8 w-8 bg-slate-800 border-slate-700 hover:bg-slate-700"
                    onClick={() => setChatOpen(!chatOpen)}
                  >
                    <MessageCircle className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  Toggle chat
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="flex flex-col min-h-screen bg-slate-950 relative overflow-hidden">
      {/* Countdown Overlay */}
      <AnimatePresence>
        {showCountdown && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.5 }}
              animate={{ scale: 1.5 }}
              transition={{
                type: "spring",
                damping: 10
              }}
              className="text-center"
            >
              <motion.div
                key={countdownValue}
                initial={{ scale: 0.5, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 1.5, opacity: 0 }}
                transition={{ duration: 0.5 }}
                className="text-8xl font-bold text-indigo-500"
              >
                {countdownValue === 0 ? 'FIGHT!' : countdownValue}
              </motion.div>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-lg text-indigo-300 mt-4"
              >
                Get ready to code!
              </motion.div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Battle Notification */}
      <AnimatePresence>
        {showBattleNotification && (
          <motion.div
            initial={{ y: -100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: -100, opacity: 0 }}
            className="absolute top-20 left-1/2 transform -translate-x-1/2 z-50"
          >
            <div className={`
              bg-gradient-to-r from-indigo-900/80 to-indigo-700/80 
              border-l-4 border-indigo-500 
              px-6 py-3 rounded-lg shadow-lg text-white font-bold
              flex items-center
            `}>
              <Zap className="w-5 h-5 mr-2 text-yellow-400" />
              {notificationMessage}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Victory Screen */}
      {isGameOver && (
        <VictoryScreen
          winner={winner}
          yourScore={testsPassed * 20}
          opponentScore={opponentTestsPassed * 20}
        />
      )}

      {/* Header */}
      <BattleHeader />

      {!matchFound ? (
        <MatchmakingScreen />
      ) : (
        <div className="text-white flex-1 flex flex-col">
          {/* Main Content */}
          <div className="flex-1 flex flex-col md:flex-row overflow-hidden">
            {/* Problem Statement Section */}
            {showProblem && (
              <div className="w-full md:w-1/4 p-4 border-r border-slate-800 bg-slate-900/40 overflow-y-auto">
                <Card className="bg-slate-800/70 border-slate-700">
                  <CardHeader className="bg-gradient-to-r from-slate-800 to-slate-800/60 pb-2">
                    <div className="flex justify-between items-center">
                      <CardTitle className="text-white">
                        {currentProblem.title}
                      </CardTitle>
                      <Badge
                        variant="outline"
                        className={`
                          ${currentProblem.difficulty === 'Easy' ? 'bg-green-900/30 text-green-400 border-green-700' :
                            currentProblem.difficulty === 'Medium' ? 'bg-yellow-900/30 text-yellow-400 border-yellow-700' :
                              'bg-red-900/30 text-red-400 border-red-700'}
                        `}
                      >
                        {currentProblem.difficulty}
                      </Badge>
                    </div>
                    <CardDescription className="text-slate-300">
                      Beat your opponent by implementing the most efficient solution!
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="text-slate-300 whitespace-pre-line">
                    {currentProblem.description}
                  </CardContent>
                </Card>

                {/* Battle Events Timeline */}
                <Card className="bg-slate-800/70 border-slate-700 mt-4">
                  <CardHeader className="bg-gradient-to-r from-slate-800 to-slate-700 text-white">
                    <CardTitle>Battle Events</CardTitle>
                  </CardHeader>
                  <CardContent className="text-slate-300">
                    {/* Add timeline events here */}
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export default CodeBattleArena;